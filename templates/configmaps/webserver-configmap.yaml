---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "webserver.fullname" . }}-config
  labels:
    {{- include "webserver.labels" . | nindent 4 }}
data:
  webserver_config.py: |
    {{- if .Values.keycloak.enabled }}
    import os
    import logging
    from flask_appbuilder.security.manager import AUTH_OAUTH
    from airflow.www.security import AirflowSecurityManager

    log = logging.getLogger(__name__)
    logging.basicConfig(level=logging.DEBUG)

    # Flask-WTF flag for CSRF
    WTF_CSRF_ENABLED = True

    # CUSTOMIZATION
    AUTH_TYPE = AUTH_OAUTH
    AUTH_USER_REGISTRATION = True  # allow users who are not already in the FAB DB
    AUTH_USER_REGISTRATION_ROLE = "Public" # this role will be given in addition to any AUTH_ROLES_MAPPING
    AUTH_ROLES_SYNC_AT_LOGIN = True
    PERMANENT_SESSION_LIFETIME = 1800

    OIDC_ISSUER = os.getenv("OIDC_ISSUER")
    OIDC_BASE_URL = "{oidc_issuer}/protocol/openid-connect".format(oidc_issuer=OIDC_ISSUER)
    OIDC_TOKEN_URL = "{oidc_base_url}/token".format(oidc_base_url=OIDC_BASE_URL)
    OIDC_AUTH_URL = "{oidc_base_url}/auth".format(oidc_base_url=OIDC_BASE_URL)
    OIDC_LOGOUT_REDIRECT_URL = "{oidc_base_url}/logout".format(oidc_base_url=OIDC_BASE_URL)
    OIDC_JWKS_URL = "{oidc_base_url}/certs".format(oidc_base_url=OIDC_BASE_URL)

    PROVIDER = 'keycloak'
    CLIENT_ID = os.getenv('CLIENT_ID')
    CLIENT_SECRET = os.getenv('CLIENT_SECRET') 

    AUTH_ROLES_MAPPING = {
    "Admin": ["Admin"],
    "Op": ["Op"],
    "User": ["User"],
    "Viewer": ["Viewer"],
    "Public": ["Public"],
    }

    # Keycloak config
    OAUTH_PROVIDERS = [{
        'name': PROVIDER,
        'icon': 'fa-key',
        'token_key': 'access_token', 
        'remote_app': {
            'client_id': CLIENT_ID,
            'client_secret': CLIENT_SECRET,
            'client_kwargs': {
                'scope': 'email profile openid'
            },
            'api_base_url': OIDC_BASE_URL,
            'access_token_url': OIDC_TOKEN_URL,
            'authorize_url': OIDC_AUTH_URL,
            'logout_redirect_url': OIDC_LOGOUT_REDIRECT_URL,
            "request_token_url": None,
            "jwks_uri": OIDC_JWKS_URL
        },
    }]

    class CustomSecurityManager(AirflowSecurityManager):

        def oauth_user_info(self, provider, response=None):
            info = self.appbuilder.sm.oauth_remotes[provider].get('openid-connect/userinfo')
            data = info.json()
            roles = "Public" # default role
            try:
                roles = data.get('resource_access').get(CLIENT_ID).get('roles')
            except:
                print("Failed to get roles, using default")
            return {
                "username": data.get("preferred_username", ""),
                "first_name": data.get("given_name", ""),
                "last_name": data.get("family_name", ""),
                "email": data.get("email", ""),
                "role_keys": roles
            }
    
    SECURITY_MANAGER_CLASS = CustomSecurityManager
    {{ end }}
     
